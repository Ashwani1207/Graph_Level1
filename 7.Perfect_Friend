Approach 1 : Using getconnected component Using A vector of comp and vector<vector<int>> comps;
#include <bits/stdc++.h>
using namespace std;
struct edge{
    int nde;
    int nbr;
    
    edge(int nde,int nbr){
        this->nde=nde;
        this->nbr=nbr;

    }
};
void getconnected(vector<vector<edge*>> &graph,int src,vector<bool> &visited,vector<int> &comp){
visited[src]=true;
comp.push_back(src);
for(edge* Edge:graph[src]){
    if(visited[Edge->nbr]==false){
        getconnected(graph,Edge->nbr,visited,comp);
    }
}
}
int main() {
  // your code goes here
  int v,e;
  cin>>v>>e;
  vector<vector<edge*>> graph(v,vector<edge*>());
  for(int i=0;i<e;i++){
      int v1,v2,wt;
      cin>>v1>>v2;
      edge* e1=new edge(v1,v2);
      edge* e2=new edge(v2,v1);
      graph[v1].push_back(e1);
      graph[v2].push_back(e2);
      
  }
  vector<vector<int>> comps;
    vector<bool> visited(1000,false);
  for(int i=0;i<v;i++){
      if(visited[i]==false){
          vector<int> comp;
          getconnected(graph,i,visited,comp);
          comps.push_back(comp);
      }
  }
  int pair=0;
 for(int i=0;i<comps.size();i++)
 {
     for(int j=i+1;j<comps.size();j++){
         int count=comps[i].size()*comps[j].size();
        pair+=count;
     }
 }
 
  cout<<pair<<endl;
 return 0;
}


Approach 2 : Using getconnected component using Single variable comp and single vector comps;
#include <bits/stdc++.h>
using namespace std;
struct edge{
    int nde;
    int nbr;
    
    edge(int nde,int nbr){
        this->nde=nde;
        this->nbr=nbr;

    }
};
int getconnected(vector<vector<edge*>> &graph,int src,vector<bool> &visited,int &comp){
visited[src]=true;
comp++;
for(edge* Edge:graph[src]){
    if(visited[Edge->nbr]==false){
        getconnected(graph,Edge->nbr,visited,comp);
    }
}
return comp;
}
int main() {
  // your code goes here
  int v,e;
  cin>>v>>e;
  vector<vector<edge*>> graph(v,vector<edge*>());
  for(int i=0;i<e;i++){
      int v1,v2,wt;
      cin>>v1>>v2;
      edge* e1=new edge(v1,v2);
      edge* e2=new edge(v2,v1);
      graph[v1].push_back(e1);
      graph[v2].push_back(e2);
      
  }
  vector<int> comps;
    vector<bool> visited(1000,false);
  for(int i=0;i<v;i++){
      if(visited[i]==false){
          int comp=0;
          int val=getconnected(graph,i,visited,comp);
          comps.push_back(val);
      }
  }
  int pair=0;
 for(int i=0;i<comps.size();i++)
 {
     for(int j=i+1;j<comps.size();j++){
         int count=comps[i]*comps[j];
        pair+=count;
     }
 }
 
  cout<<pair<<endl;
 return 0;
}

Input : 
7
5
0 1
2 3
4 5
5 6
4 6
OUTPUT : 
16
