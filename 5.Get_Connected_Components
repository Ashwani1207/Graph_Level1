#include <bits/stdc++.h>
using namespace std;
struct edge{
    int nde;
    int nbr;
    int wt;
    edge(int nde,int nbr,int wt){
        this->nde=nde;
        this->nbr=nbr;
        this->wt=wt;
    }
};
void getconnected(vector<vector<edge*>> &graph,int src,vector<bool> &visited,vector<int> &comp){
visited[src]=true;
comp.push_back(src);
for(edge* Edge:graph[src]){
    if(visited[Edge->nbr]==false){
        getconnected(graph,Edge->nbr,visited,comp);
    }
}
}
int main() {
  // your code goes here
  int v,e;
  cin>>v>>e;
  vector<vector<edge*>> graph(v,vector<edge*>());
  for(int i=0;i<e;i++){
      int v1,v2,wt;
      cin>>v1>>v2>>wt;
      edge* e1=new edge(v1,v2,wt);
      edge* e2=new edge(v2,v1,wt);
      graph[v1].push_back(e1);
      graph[v2].push_back(e2);
      
  }
  vector<vector<int>> comps;
    vector<bool> visited(1000,false);
  for(int i=0;i<v;i++){
      if(visited[i]==false){
          vector<int> comp;
          getconnected(graph,i,visited,comp);
          comps.push_back(comp);
      }
  }
  cout<<"[";
  for(int j=0;j<comps.size();j++){
      cout<<"[";
      for(int k=0;k<comps[j].size();k++){
          cout<<comps[j][k];
          if(k<comps[j].size()-1)
          cout<<", ";
      }
      cout<<"]";
      if(j<comps.size()-1)
      cout<<", ";
  }
  cout<<"]";
  
     
  return 0;
}

INPUT : 7
5
0 1 10
2 3 10
4 5 10
5 6 10
4 6 10

ouTPUT : [[0,1],[2,3],[4,5,6]]
