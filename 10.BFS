#include <bits/stdc++.h>
using namespace std;
struct edge{
    int nde;
    int nbr;
    int wt;
    edge(int nde,int nbr,int wt){
        this->nde=nde;
        this->nbr=nbr;
        this->wt=wt;
    }
};
vector<bool> visited(100,false);
void bfs(vector<vector<edge*>> &graph,int src,string psf){
    queue<pair<int,string>> bfsqueue;
    bfsqueue.push({src,psf});
    while(bfsqueue.size()>0){
        auto t=bfsqueue.front();
        bfsqueue.pop();
        int val=t.first;
        if(visited[val]==true)
        continue;
        else{
            visited[val]=true; 
            cout<<val<<"@"<<t.second<<endl;
            for(edge* ed:graph[val]){
                if(visited[ed->nbr]==false){
                    bfsqueue.push({ed->nbr,t.second+to_string(ed->nbr)});
                }
            }
        }
    }
        
    
}
int main() {
	// your code goes here
	int v,e;
	cin>>v>>e;
	vector<vector<edge*>> graph(v,vector<edge*>());
	for(int i=0;i<e;i++){
	    int v1,v2,wt;
	    cin>>v1>>v2>>wt;
	    edge* e1=new edge(v1,v2,wt);
	    edge* e2=new edge(v2,v1,wt);
	    graph[v1].push_back(e1);
	    graph[v2].push_back(e2);
	  
	}	 
	  int src;
	    cin>>src;
	    bfs(graph,src,to_string(src));
	return 0;
}
